#!/bin/bash
# ------------------------------------------------------------------------------
# Set base16 color.  Mom and Dad functions are a simple tribute to my parents.
# ------------------------------------------------------------------------------
mom() {
  base16Color $1 dark
}

dad() {
  base16Color $1 light
}

ct() {
  cd ${HOME}/git/color/base16-shell && ./colortest && cd -
}

# ------------------------------------------------------------------------------
# A check for the esistence of a program on my path.
# ------------------------------------------------------------------------------
programExists() {
  which "$1" &> /dev/null ;
}

# ------------------------------------------------------------------------------
# A check for the esistence of a file.
# ------------------------------------------------------------------------------
fileExists() {
  [[ -f "$1" ]]
}

# ------------------------------------------------------------------------------
# A check for the esistence of a directory.
# ------------------------------------------------------------------------------
dirExists() {
  [[ -d "$1" ]]
}

# ------------------------------------------------------------------------------
# Append to my path 
# ------------------------------------------------------------------------------
appendToPath() {
  if dirExists "$1"; then
    export PATH="${PATH}:$1"
  fi
}


# ------------------------------------------------------------------------------
# Disable features / programs running on OSX.
# ------------------------------------------------------------------------------
if [[ ${OSTYPE} =~ "darwin" ]]; then
  msa() { Launchctl remove com.microsoft.SyncServicesAgent ; }
  pah() { defaults write -g ApplePressAndHoldEnable -bool false ; }
fi

# ------------------------------------------------------------------------------
# Set terminal title.
# ------------------------------------------------------------------------------
title() { echo -n -e "\033]0;$1\007"; }

# ------------------------------------------------------------------------------
# Docker machine and stack commands
# ------------------------------------------------------------------------------
sdm() {
  docker-machine env
  eval "$(docker-machine env default)"
  docker-machine start
}

docker-gc() {
  docker ps --no-trunc -aq | xargs docker rm
  docker images -f "dangling=true" -q | xargs docker rmi
}

dba() { stack exec -- doc-build; }
dbc() { stack exec -- doc-build clean ; }
dbh() { stack build hmst-documentation ; }
dbt() { stack exec -- doc-build tex ; }
dbti(){ stack exec -- env DONT_RERUN_TEX_BUILD=1 doc-build tex;}
dbv() { stack build verify && stack exec verify ; }

# ------------------------------------------------------------------------------
# Generating a new SSH key and adding it to the ssh-agent
# https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent
# ------------------------------------------------------------------------------
sshkey (){
  if fileExists ${HOME}/.ssh/$1_rsa; then
    eval "$(ssh-agent -s)"
    ssh-add ${HOME}/.ssh/$1_rsa
  else
    echo ${HOME}/.ssh/$1_rsa does not exist.
  fi
}

sshlist() {
  ps -e | awk '/ssh-agent/'
}

sshwork() {
  eval "$(ssh-agent -s)"
  ssh-add ${HOME}/.ssh/traap_rsa ${HOME}/.ssh/fkbb_rsa

}

sshme() {
  echo "My ssh-agent PID ${SSH_AGENT_PID}"
}

sshkill() {
  for pid in $(ps -ef | awk '/ssh-agent/ {print $2}'); do kill -9 $pid; done
}

sshstart() {
  if programExists /etc/init.d/ssh; then
    sudo /etc/init.d/ssh start
  fi
}

sshstop() {
  if programExists /etc/init.d/ssh; then
    sudo /etc/init.d/ssh stop
  fi
}

# ------------------------------------------------------------------------------
# Base16 Shell
# ------------------------------------------------------------------------------
BASE16_SHELL=$HOME/git/color/base16-shell/
[[ -n $PS1 ]] && [[ -s $BASE16_SHELL/profile_helper.sh ]] && \
  eval "$($BASE16_SHELL/profile_helper.sh)"

# ------------------------------------------------------------------------------
# Repeat a command until a key is pressed.  The read command waits
# 1sec before timing out.
# ------------------------------------------------------------------------------
repeat() {
  let passNo=0;
  while [ true ]; do
    read -t 1 -n 1
    if [ $? -gt 0 ]; then
      let passNo=$((passNo+1))
      clear
      echo Repeating [$@]  Ctrl-C to stop.  Pass: $passNo
      $@
      sleep 5
    fi
  done
}

# ------------------------------------------------------------------------------
# Check the porcelain state of my git repositories.
# ------------------------------------------------------------------------------
lsd() { ls -d * | tr -d '/' ; }

repo() {
  case $1 in
    git)
      repoName=git
      ;;
    bb)
      repoName=bb
      ;;
    *)
      repoName=git
  esac
  echo $repoName
}

gitPull() {
  if [[ "pull" == $1 ]]; then
    if [[ -z $(git status --porcelain) ]]; then
      git pull
      echo
    fi
  fi
}

gitSetUserAndEmail(){
  if [[ "pull" == $2 ]]; then
    if [[ "bb" == $1  ]]; then
      gce fk
    else
      gce traap
    fi
  fi
}

gits(){
  # Save current directory.
  dir=$(pwd)

  repoName=$(repo $1)
  cd ${HOME}/${repoName} > /dev/null;

  for i in $(lsd); do
    d=${HOME}/${repoName}/${i%%}
    if [[ -d "${d}/.git" ]]; then
      echo "*** ${d} ***";
      cd ${d} > /dev/null
      git status --short --branch;
      echo ""
      gitPull $2
      gitSetUserAndEmail $1 $2
      cd - > /dev/null;
    fi
  done;

  # Restore current director.
  cd $dir
}

# ------------------------------------------------------------------------------
# Cxx helper to simplify CxxTest use for C++ software.
# ------------------------------------------------------------------------------
cxx() {
  ${HOME}/git/cxxtest/bin/cxxtestgen --error-printer -o Test$1.cpp Test$1.h
  g++ -w -o Test$1 Test$1.cpp
  ./Test$1
  rm Test$1.cpp
}

# ------------------------------------------------------------------------------
# Start Vim with clientserver when it is compiled in.
# ------------------------------------------------------------------------------
vimCheck() {
  if [[ -n $(vim --version | grep clientserver) ]]; then
    alias vimx='vim --servername VIM'
  fi
}

vimu() {
  vim -u NORC $@
}

if [[ ${OSTYPE} =~ "darwin" ]]; then
  vimCheck
fi

# ------------------------------------------------------------------------------
# Perforce defaults.
# ------------------------------------------------------------------------------
if [[ ${OSTYPE} =~ "linux" ]]; then
  if [[ ${HOSTNAME} =~ "Ryder" ]]; then
    export P4DISK=/Volumes/Larry
    export P4HOST=localhost
    export P4PORT=1666
    export P4ROOT=${P4DISK}/p4root
    export P4CLIENT=Gary:on:Ryder
  fi
fi

# ------------------------------------------------------------------------------
# Read Unix man pages faster.
# ------------------------------------------------------------------------------
if [[ -f ${HOME}/.vim/bundle/vim-superman/bin/vman ]]; then
  export PATH="$PATH:$HOME/.vim/bundle/vim-superman/bin"
fi

# ------------------------------------------------------------------------------
# sdkman
# ------------------------------------------------------------------------------
if [[ -f ${HOME}/.sdkman/bin/sdkman-init.sh ]]; then
  export SDKMAN_DIR="${HOME}/.sdkman"
  source "${HOME}/.sdkman/bin/sdkman-init.sh"
fi

# ------------------------------------------------------------------------------
# Build gem
# ------------------------------------------------------------------------------
bldgem() {
  clear && cd $1 \
     && bundle install \
     && bundle exec rake \
     && bundle exec rake install
}

# ------------------------------------------------------------------------------
# Build something I know about.
# ------------------------------------------------------------------------------
bld() {
  case $1 in
    amber)
      bldgem ${HOME}/git/amber
      ;;
    emend)
      bldgem ${HOME}/git/emend
      ;;
    daryn)
      bldgem ${HOME}/git/daryn
      ;;
    ametrine)
      bldgem ${HOME}/bb/ametrine
      ;;
    autoexample)
      bldgem ${HOME}/bb/autoexample
      ;;
    *)
      echo "bld: $1 not supported."
      echo "Usage: bld {amber|daryn|cwa|emend}"
  esac
}

# ------------------------------------------------------------------------------
# amber function.
# ------------------------------------------------------------------------------
AMBERPATH=${HOME}/git/amber
export AMBERPATH

newfactoryitem() {
  ${AMBERPATH}/bin/newfactoryitem $@
}

check-test-output() {
  echo grep -rw --include=\s*.* test-output/ -e $1
  grep -rw --include=\s*.* test-output/ -e $1
}

pass() {
  check-test-output PASS
}

fail() {
  check-test-output FAIL
}

iur() {
  echo grep -rw --include=\*.yaml factory/ -e 'IUR' 
  grep -rw --include=\*.yaml factory/ -e 'IUR' 
}

validate-git-client() {
  cd ${HOME}/git/tool-validation/git-client
  rm -rf _build/ test-ouput/
  amber --nodryrun --environment --verbose --plan=command-line
  docbld
}

validate-git-gui() {
  cd ${HOME}/git/tool-validation/git-client
  rm -rf _build/ test-ouput/
  amber --nodryrun --environment --verbose --plan=command-line \
        --language=en --browser=Chrome
  docbld
}

# ------------------------------------------------------------------------------
# Autodoc location
# ------------------------------------------------------------------------------
AUTODOCPATH="${HOME}/git/autodoc"
export AUTODOCPATH

# ------------------------------------------------------------------------------
# docbld functions
# ------------------------------------------------------------------------------
DOCBLDPATH=${HOME}/git/docbld
export DOCBLDPATH

docbld() {
  rake --rakefile ${DOCBLDPATH}/Rakefile $1
}

newdoc() {
  ${DOCBLDPATH}/bin/newdoc "$@"
}

newdata() {
  ${DOCBLDPATH}/bin/newdata
}

# ------------------------------------------------------------------------------
# emend function.
# ------------------------------------------------------------------------------
EMENDPATH=${HOME}/git/emend
export EMENDPATH

newcomponent() {
  ${EMENDPATH}/bin/newcomponent $@
}

# ------------------------------------------------------------------------------
# GIT_HOME is needed for test automation framework.
# ------------------------------------------------------------------------------
if [[ -d ${HOME}/bb ]]; then
  export GIT_HOME=${HOME}/bb
fi

# ------------------------------------------------------------------------------
# spath function tells me each part of my current path.
# ------------------------------------------------------------------------------
spath() {
  echo $PATH | sed -n 1'p' | tr ':' '\n' | while read word; do
    echo $word
  done
}

# ------------------------------------------------------------------------------
# master moves me to master and shows me a few commits.
# ------------------------------------------------------------------------------
br() {
  git co $1
}

master() {
  br master
  clear
  git logg -15
}

# ------------------------------------------------------------------------------
# Grep my history for a prior command I used. 
# ------------------------------------------------------------------------------
hg() {
  history | grep "$1"
}

# ------------------------------------------------------------------------------
# File & String related functions
# ------------------------------------------------------------------------------
ff()  {
  find . -type f -iname "$1" -print ;
}

ffr() { find . -name "$1" -delete -ls ; }

ffw() {
  local ext=$1 pattern=$2
  find . -name "$ext" -type f -exec grep "$pattern" /dev/null {} +
}

# ----------------------------------------------------------------------------t-
# Git helpers
# ------------------------------------------------------------------------------
gce() {
  if [[ "amgen" = $1 ]]; then
    git config --local user.name gahoward
    git config --local user.email gahoward@amgen.com
  elif [[ "edx" = $1 ]]; then
    git config --local user.name gary.howard
    git config --local user.email gary.howard@endotronicx.com
  elif [[ "fk" = $1 ]]; then
    git config --local user.name gahoward
    git config --local user.email gary.howard@fresenius-kabi.com
  elif [[ "mhp" = $1 ]]; then
    git config --local user.name ghoward
    git config --local user.email gahoward@mhealthpharma.com
  elif [[ "traap" = $1 ]]; then
    git config --local user.name Traap
    git config --local user.email gary.a.howard@mac.com
  else
    echo "Usage: gce [amgen|edx|fk|mhp|traap]"
    echo "Found: " $1
  fi
  git config --local --get user.name
  git config --local --get user.email
}

resetBranch() {
  git reset --hard $1
  if [[ $? -eq 0 ]]; then
    git push --force
  fi
}

# ------------------------------------------------------------------------------
# Disable features / programs running on OSX.
# ------------------------------------------------------------------------------
if [[ ${OSTYPE} =~ "darwin" ]]; then
  msa() { Launchctl remove com.microsoft.SyncServicesAgent ; }
  pah() { defaults write -g ApplePressAndHoldEnable -bool false ; }
fi

# ------------------------------------------------------------------------------
# Set terminal title.
# ------------------------------------------------------------------------------
title() { echo -n -e "\033]0;$1\007"; }

# ------------------------------------------------------------------------------
# Docker machine and stack commands
# ------------------------------------------------------------------------------
sdm() {
  docker-machine env
  eval "$(docker-machine env default)"
  docker-machine start
}

docker-gc() {
  docker ps --no-trunc -aq | xargs docker rm
  docker images -f "dangling=true" -q | xargs docker rmi
}

dba() { stack exec -- doc-build; }
dbc() { stack exec -- doc-build clean ; }
dbh() { stack build hmst-documentation ; }
dbt() { stack exec -- doc-build tex ; }
dbti(){ stack exec -- env DONT_RERUN_TEX_BUILD=1 doc-build tex;}
dbv() { stack build verify && stack exec verify ; }

# ------------------------------------------------------------------------------
# Generating a new SSH key and adding it to the ssh-agent
# https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent
# ------------------------------------------------------------------------------
sshkey (){
  if fileExists ${HOME}/.ssh/$1_rsa; then
    eval "$(ssh-agent -s)"
    ssh-add ${HOME}/.ssh/$1_rsa
  else
    echo ${HOME}/.ssh/$1_rsa does not exist.
  fi
}

sshlist() {
  ps -e | awk '/ssh-agent/'
}

sshkill() {
  for pid in $(ps -ef | awk '/ssh-agent/ {print $2}'); do kill -9 $pid; done
}

sshstart() {
  if programExists /etc/init.d/ssh; then
    sudo /etc/init.d/ssh start
  fi
}

sshstop() {
  if programExists /etc/init.d/ssh; then
    sudo /etc/init.d/ssh stop
  fi
}

# ------------------------------------------------------------------------------
# Repeat a command until a key is pressed.  The read command waits
# 1sec before timing out.
# ------------------------------------------------------------------------------
repeat() {
  let passNo=0;
  while [ true ]; do
    read -t 1 -n 1
    if [ $? -gt 0 ]; then
      let passNo=$((passNo+1))
      clear
      echo Repeating [$@]  Ctrl-C to stop.  Pass: $passNo
      $@
      sleep 5
    fi
  done
}

# ------------------------------------------------------------------------------
# Check the porcelain state of my git repositories.
# ------------------------------------------------------------------------------
lsd() { ls -d * | tr -d '/' ; }

repo() {
  case $1 in
    git)
      repoName=git
      ;;
    bb)
      repoName=bb
      ;;
    *)
      repoName=git
  esac
  echo $repoName
}

gitPull() {
  if [[ "pull" == $1 ]]; then
    if [[ -z $(git status --porcelain) ]]; then
      git pull
      echo
    fi
  fi
}

gitSetUserAndEmail(){
  if [[ "pull" == $2 ]]; then
    if [[ "bb" == $1  ]]; then
      gce fk
    else
      gce traap
    fi
  fi
}

gits(){
  # Save current directory.
  dir=$(pwd)

  repoName=$(repo $1)
  cd ${HOME}/${repoName} > /dev/null;

  for i in $(lsd); do
    d=${HOME}/${repoName}/${i%%}
    if [[ -d "${d}/.git" ]]; then
      echo "*** ${d} ***";
      cd ${d} > /dev/null
      git status --short --branch;
      echo ""
      gitPull $2
      gitSetUserAndEmail $1 $2
      cd - > /dev/null;
    fi
  done;

  # Restore current director.
  cd $dir
}

# ------------------------------------------------------------------------------
# Cxx helper to simplify CxxTest use for C++ software.
# ------------------------------------------------------------------------------
cxx() {
  ${HOME}/git/cxxtest/bin/cxxtestgen --error-printer -o Test$1.cpp Test$1.h
  g++ -w -o Test$1 Test$1.cpp
  ./Test$1
  rm Test$1.cpp
}

# ------------------------------------------------------------------------------
# Start Vim with clientserver when it is compiled in.
# ------------------------------------------------------------------------------
vimCheck() {
  if [[ -n $(vim --version | grep clientserver) ]]; then
    alias vimx='vim --servername VIM'
  fi
}

vimu() {
  vim -u NORC $@
}

if [[ ${OSTYPE} =~ "darwin" ]]; then
  vimCheck
fi

# ------------------------------------------------------------------------------
# amber function.
# ------------------------------------------------------------------------------
AMBERPATH=${HOME}/git/amber
export AMBERPATH

newfactoryitem() {
  ${AMBERPATH}/bin/newfactoryitem $@
}

check-test-output() {
  echo grep -rw --include=\s*.* test-output/ -e $1
  grep -rw --include=\s*.* test-output/ -e $1
}

pass() {
  check-test-output PASS
}

fail() {
  check-test-output FAIL
}

iur() {
  echo grep -rw --include=\*.yaml factory/ -e 'IUR' 
  grep -rw --include=\*.yaml factory/ -e 'IUR' 
}

validate-git-client() {
  cd ${HOME}/git/tool-validation/git-client
  rm -rf _build/ test-ouput/
  amber --nodryrun --environment --verbose --plan=command-line
  docbld
}

validate-git-gui() {
  cd ${HOME}/git/tool-validation/git-client
  rm -rf _build/ test-ouput/
  amber --nodryrun --environment --verbose --plan=command-line \
        --language=en --browser=Chrome
  docbld
}

# ------------------------------------------------------------------------------
# Build gem
# ------------------------------------------------------------------------------
bldgem() {
  clear && cd $1 \
     && bundle install \
     && bundle exec rake \
     && bundle exec rake install
}

# ------------------------------------------------------------------------------
# Build something I know about.
# ------------------------------------------------------------------------------
bld() {
  case $1 in
    amber)
      bldgem ${HOME}/git/amber
      ;;
    emend)
      bldgem ${HOME}/git/emend
      ;;
    daryn)
      bldgem ${HOME}/git/daryn
      ;;
    ametrine)
      bldgem ${HOME}/bb/ametrine
      ;;
    autoexample)
      bldgem ${HOME}/bb/autoexample
      ;;
    *)
      echo "bld: $1 not supported."
      echo "Usage: bld {amber|daryn|cwa|emend}"
  esac
}

# ------------------------------------------------------------------------------
# docbld functions
# ------------------------------------------------------------------------------
docbld() {
  rake --rakefile ${DOCBLDPATH}/Rakefile $1
}

newdoc() {
  ${DOCBLDPATH}/bin/newdoc "$@"
}

newdata() {
  ${DOCBLDPATH}/bin/newdata
}

# ------------------------------------------------------------------------------
# emend function.
# ------------------------------------------------------------------------------
newcomponent() {
  ${EMENDPATH}/bin/newcomponent $@
}

# ------------------------------------------------------------------------------
# spath function tells me each part of my current path.
# ------------------------------------------------------------------------------
spath() {
  echo $PATH | sed -n 1'p' | tr ':' '\n' | while read word; do
    echo $word
  done
}

# ------------------------------------------------------------------------------
# master moves me to master and shows me a few commits.
# ------------------------------------------------------------------------------
br() {
  git co $1
}

master() {
  br master
  clear
  git logg -15
}
