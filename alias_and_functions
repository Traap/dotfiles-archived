#!/bin/bash

# ------------------------------------------------------------------------------
# Set base16 color.  Mom and Dad a simple tribute to my parents.
# ------------------------------------------------------------------------------
function mom() {
  base16Color $1 dark
}
function dad() {
  base16Color $1 lightgvs
}
function ct() {
  cd ~/git/color/base16-shell && ./colortest && cd -
}
function base16Color() {
  source ~/git/color/base16-shell/scripts/base16-$1-$2.sh
  echo "Base16 color: " $1 $2
}

# ------------------------------------------------------------------------------
# A few helper aliases. 
# ------------------------------------------------------------------------------
alias gvim='vim -g'
alias tmux='tmux -2'
alias vim='vim --servername VIM'
export TERM=xterm-256color
alias lw='ll "$(which $1)"'

# ------------------------------------------------------------------------------
# Operating system specific settings.
# ------------------------------------------------------------------------------
echo "Operating system: " ${OSTYPE}
if [[ ${OSTYPE} =~ "darwin" ]]; then
    export CLICOLOR=1
    export LSCOLORS=GxFxBxDxCxegedabagacad
    export PATH="${HOME}/Library/Haskell/bin:${PATH}"
    alias me='source ~/.bash_profile'
    alias la='ls -A'
    alias ll='ls -lahG'
    if [[ ${HOSTNAME} =~ "Stooges" ]]; then
      alias  fpc0='sshfs fpc:git/smart-device-sw /Volumes/Larry/fpc0'
      alias ufpc0='umount /Volumes/Larry/fpc0'
      alias   ds6='sshfs datasci:git/smart-device-sw /Volumes/Larry/ds6'
      alias  uds6='umount /Volumes/Larry/ds6'
    else
      alias  fpc0='sshfs fpc:git/smart-device-sw ~/fpc0'
      alias ufpc0='umount ~/fpc0'
      alias   ds6='sshfs datasci:git/smart-device-sw ~/ds6'
      alias  uds6='umount ~/ds6'
    fi
    if [[ -f $(brew --prefix)/etc/bash_completion ]]; then
      . $(brew --prefix)/etc/bash_completion
    fi
elif [[ ${OSTYPE} =~ "linux" ]]; then
    export PATH="${HOME}/.cabal/bin:/home/.linuxbrew/bin:${PATH}"
    alias me='source ~/.bashrc'
    alias la='ls -A --color'
    alias ll='ls -lahG --color'
    if [[ -f /usr/share/bash-completion/bash_completion ]]; then
      . /usr/share/bash-completion/bash_completion
    fi
else
    echo "Unknown operating system:" ${OSTYPE}
fi

# ------------------------------------------------------------------------------
# iTerm2 shell integration. 
# ------------------------------------------------------------------------------
if [[ -f ${HOME}/.iterm2_shell_integration.bash ]]; then
  source ${HOME}/.iterm2_shell_integration.bash
fi

# ------------------------------------------------------------------------------
# Travis integration 
# ------------------------------------------------------------------------------
if [[ -f ${HOME}.travis/travis.sh ]]; then
  source ${HOME}.travis/travis.sh
fi

# ------------------------------------------------------------------------------
# Stack specific settings. 
# ------------------------------------------------------------------------------
if [[ -s /usr/local/bin/stack ]]; then
  eval "$(stack --bash-completion-script stack)"
fi

# ------------------------------------------------------------------------------
# HMST project specific settings. 
# ------------------------------------------------------------------------------
export HMST_BIN="${HOME}/git/smart-device-sw/tools/bin"
alias cc='python3 ${HMST_BIN}/clean-code'
alias pdfmake='${HMST_BIN}/pdfmake'

# ------------------------------------------------------------------------------
# Use vim or emacs keybindings.  Troubleshoot tmux + vim + vim-keybindings.
# ------------------------------------------------------------------------------
set -o emacs

# ------------------------------------------------------------------------------
# Haskell and Cabal
# ------------------------------------------------------------------------------
alias ci='cabal install'
alias cif='cabal install --force-reinstalls'
alias cemacs='emacs -Q -l ~/git/emacs-haskell-config/init.el'
alias cls='clear'

# ------------------------------------------------------------------------------
# General purpose aliases.
# ------------------------------------------------------------------------------
alias decrypt='~/git/dotfiles/decrypt'
alias ec='emacsclient -c'
alias egrep='egrep --color=auto'
alias encrypt='~/git/dotfiles/encrypt'
alias fgrep='fgrep --color=auto'
alias grep='grep --color=auto'
alias h='history'
alias ssh='ssh -A'

# ------------------------------------------------------------------------------
# Aliases to folders within my Git root.
# ------------------------------------------------------------------------------
alias ac='cd ~/git/AllanConsulting'
alias bootd='cd ~/git/bootstrap'
alias color='cd ~/git/color'
alias dot='cd ~/git/dotfiles/'
alias hh='cd ~/git/HowardHouse'
alias resume='cd ~/git/resume'
alias sshd='cd ~/git/ssh'
alias tmuxd='cd ~/git/tmux'
alias vimd='cd ~/git/vim'

# ------------------------------------------------------------------------------
# A function to grep my command history
# ------------------------------------------------------------------------------
function hg() {
  history | grep "$1"
}

# ------------------------------------------------------------------------------
# File & String related functions
# ------------------------------------------------------------------------------
function ff()  {
  find . -type f -iname "$1" -print ;
}
function ffr() { find . -name "$1" -delete -ls ; }
function ffw() {
  local ext=$1 pattern=$2
  find . -name "$ext" -type f -exec grep "$pattern" /dev/null {} +
}

# ------------------------------------------------------------------------------k
# Use functions to create pdf document.
# ------------------------------------------------------------------------------k
function adoc() {
  f=$(basename "$1")
  f="${f%.*}"
  time asciidoctor \
         --trace \
         --require asciidoctor-pdf \
         --backend pdf \
         --attribute pdf-style=$HOME/git/dotfiles/asciidoctor/basic-theme.yml \
         --out-file _pdf/"$f".pdf \
         "$1" ;
}
function a2l() {
  time \
    asciidoctor-latex \
         --no-header-footer \
         --safe-mode=secure \
         "$1" ;
}
function atex() {
  mkdir -p _pdf
#  time \
    pdflatex \
         --no-shell-escape \
         --interaction=batchmode \
         --output-directory _pdf \
         "$1" ;
}

# ------------------------------------------------------------------------------
# Git helpers
# ------------------------------------------------------------------------------
function gce() {
  if [[ "amgen" = $1 ]]; then
    git config --local user.name gahoward
    git config --local user.email gahoward@amgen.com
  elif [[ "mhp" = $1 ]]; then
    git config --local user.name ghoward
    git config --local user.email gahoward@mhealthpharma.com
  elif [[ "traap" = $1 ]]; then
    git config --local user.name Traap
    git config --local user.email gary.a.howard@mac.com
  else
    echo "Usage: gce [amgen|mhp|traap]"
    echo "Found: " $1
  fi
  git config --local --get user.name
  git config --local --get user.email
}

# ------------------------------------------------------------------------------
# Prompt
# ------------------------------------------------------------------------------
# see https://github.com/magicmonty/bash-git-prompt
PS1_START='\[\033[01;31m\]\u\[\033[01;33m\]@\[\033[01;34m\]\h\[\033[01;32m\]:\[\033[01;36m\]\w'
PS1_END='\n\[\033[01;36m\]\$\[\033[00m\] '
export PS1=${PS1_START}${PS1_END}
if [[ ${OSTYPE} =~ "darwin" ]]; then
  if [[ -f $(brew --prefix)/opt/bash-git-prompt/share/gitprompt.sh ]]; then
    GIT_PROMPT_START=${PS1_START}
    GIT_PROMPT_END=${PS1_END}
    source "$(brew --prefix)/opt/bash-git-prompt/share/gitprompt.sh"
  fi
elif [[ ${OSTYPE} =~ "linux" ]]; then
  if [[ -f ~/.bash-git-prompt/gitprompt.sh ]]; then
    GIT_PROMPT_START=${PS1_START}
    GIT_PROMPT_END=${PS1_END}
    source ~/.bash-git-prompt/gitprompt.sh
  fi
fi

# ------------------------------------------------------------------------------
# Disable features / programs running on OSX.
# ------------------------------------------------------------------------------
function msa() { Launchctl remove com.microsoft.SyncServicesAgent ; }
function pah() { defaults write -g ApplePressAndHoldEnable -bool false ; }

# ------------------------------------------------------------------------------
# Set terminal title.
# ------------------------------------------------------------------------------
function title() { echo -n -e "\033]0;$1\007"; }

# ------------------------------------------------------------------------------
# Docker machine and stack commands
# ------------------------------------------------------------------------------
function sdm() {
  docker-machine env
  eval "$(docker-machine env default)"
  docker-machine start
}
function docker-gc() {
  docker ps --no-trunc -aq | xargs docker rm
  docker images -f "dangling=true" -q | xargs docker rmi
}
function dba() { stack exec -- doc-build; }
function dbc() { stack exec -- doc-build clean ; }
function dbh() { stack build hmst-documentation ; }
function dbt() { stack exec -- doc-build tex ; }
function dbti(){ stack exec -- env DONT_RERUN_TEX_BUILD=1 doc-build tex;}
function dbv() { stack build verify && stack exec verify ; }

# ------------------------------------------------------------------------------
# Generating a new SSH key and adding it to the ssh-agent
# https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent
# ------------------------------------------------------------------------------
alias ssha='eval "$(ssh-agent -s)"'
function sshkeys () {
  ssha
  ssh-add ~/.ssh/css_rsa
  ssh-add ~/.ssh/fhscore_rsa
  ssh-add ~/.ssh/mhp_rsa
  ssh-add ~/.ssh/traap_rsa
}

# ------------------------------------------------------------------------------
# Brew wants needs me to own usr/local 
# ------------------------------------------------------------------------------
alias ulo='sudo chown -R $(whoami) /usr/local'

# ------------------------------------------------------------------------------
# Base16 Shell 
# ------------------------------------------------------------------------------
BASE16_SHELL=$HOME/git/color/base16-shell/                                     
[[ -n $PS1 ]] && [[ -s $BASE16_SHELL/profile_helper.sh ]] && eval "$($BASE16_SHELL/profile_helper.sh)"

# ------------------------------------------------------------------------------
# Repeat a command until a key is pressed.  The read command waits
# 1sec before timing out.  
# ------------------------------------------------------------------------------
function repeat() {
  let passNo=0;
  while [ true ]; do
    read -t 1 -n 1
    if [ $? -gt 0 ]; then
      let passNo=$((passNo+1))
      clear
      echo Repeating [$@]  Ctrl-C to stop.  Pass: $passNo
      $@
      sleep 5
    fi
  done
}
alias rgl='repeat git logg -6'
alias rgs='repeat git status --short'

# ------------------------------------------------------------------------------
# JAVA. 
# ------------------------------------------------------------------------------
CLASSPATH=build/classes/main:build/classes/test
export CLASSPATH

# ------------------------------------------------------------------------------
# Git, Vim and Tmux maddness. 
# ------------------------------------------------------------------------------
function vimt() {
  cd ${HOME}/git/$1
  title $1
  tmux new-session -A -s $1 \; \
    send-keys 'vim' C-m \;
}

# ------------------------------------------------------------------------------
# Functions I am experimenting with. 
# ------------------------------------------------------------------------------
function lsd() { ls -l  $1 | grep "^d" | awk -F" " '{print $9}' ; }
function lsdi(){ ls -Al $1 | grep "^d" | awk -F" " '{print $9}' ; }
function gits(){ 
  for i in $(lsd); do cd ~/git/${i%%} && git status --short; done; 
  cd - ;
}
function cxx() {
  ${HOME}/git/cxxtest/bin/cxxtestgen --error-printer -o Test$1.cpp Test$1.h
  g++ -w -o Test$1 Test$1.cpp
  ./Test$1
  rm Test$1.cpp
}
# ------------------------------------------------------------------------------
# Perforce defaults. 
# ------------------------------------------------------------------------------
if [[ ${OSTYPE} =~ "linux" ]]; then
  if [[ ${HOSTNAME} =~ "Ryder" ]]; then
    export P4DISK=/Volumes/Larry
    export P4HOST=localhost
    export P4PORT=1666
    export P4ROOT=${P4DISK}/p4root
    export P4CLIENT=Gary:on:Ryder
    alias p4='${P4DISK}/2013.1/p4'
    alias p4d='${P4DISK}/2013.1/p4d'
  fi
fi

