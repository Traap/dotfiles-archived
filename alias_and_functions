#!/bin/bash
#----------------------------------------------------------------------
# Set base16 color.  Mom and Dad a simple tribute to my parents.
#----------------------------------------------------------------------
function mom() {
  base16Color $1 dark
}
function dad() {
  base16Color $1 light
}
function ct() {
  cd ~/git/dotfiles/color/base16-shell && ./colortest && cd -
}
function base16Color() {
  source ~/git/dotfiles/color/base16-shell/scripts/base16-$1-$2.sh
  echo "Base16 color: " $1 $2
}
#-------------------------------------------------------------------------------
# Operating system specif settings.
#-------------------------------------------------------------------------------
echo "Operating system: " ${OSTYPE}
if [[ ${OSTYPE} =~ "darwin" ]]; then
    export CLICOLOR=1
    export HMST_BIN="${HOME}/git/smart-device-sw/tools/bin"
    export LSCOLORS=GxFxBxDxCxegedabagacad
    export PATH="${HOME}/Library/Haskell/bin:${PATH}"
    export TERM=xterm-256color
    alias me='source ~/.bash_profile'
    alias la='ls -A'
    alias ll='ls -lahG'
    alias lw='ll "$(which $1)"'
    if [[ ${HOSTNAME} =~ "Stooges" ]]; then
      alias fpc0='sshfs fpc:git/smart-device-sw /Volumes/Larry/fpc0'
      alias ufpc0='umount /Volumes/Larry/fpc0'
    else
      alias fpc0='sshfs fpc:git/smart-device-sw ~/fpc0'
      alias ufpc0='umount ~/fpc0'
    fi
    alias vim='mvim -v'
    alias vimg='vim -g'
    alias cc='python3 ${HMST_BIN}/clean-code'
    mom default
elif [[ ${OSTYPE} =~ "linux" ]]; then
    export HMST_BIN="${HOME}/git/smart-device-sw/tools/bin"
    export PATH="${HOME}/.cabal/bin:${PATH}"
    export TERM=xterm
    alias me='source ~/.bashrc'
    alias la='ls -A --color'
    alias ll='ls -lahG --color'
    alias cc='python ${HMST_BIN}/clean-code'
else
    echo "Unknown operating system:" ${OSTYPE}
fi
alias ulo='sudo chown -R $(whoami) /usr/local'
#-------------------------------------------------------------------------------
# Use vim keybinds
#-------------------------------------------------------------------------------
#set -o vi

#-------------------------------------------------------------------------------
# Haskell and Cabal
#-------------------------------------------------------------------------------
alias ci='cabal install'
alias cif='cabal install --force-reinstalls'
alias cemacs='emacs -Q -l ~/git/emacs-haskell-config/init.el'
alias cls='clear'

#-------------------------------------------------------------------------------
# General purpose aliases.
#-------------------------------------------------------------------------------
alias decrypt='~/git/dotfiles/decrypt'
alias ec='emacsclient -c'
alias egrep='egrep --color=auto'
alias encrypt='~/git/dotfiles/encrypt'
alias fgrep='fgrep --color=auto'
alias grep='grep --color=auto'
alias h='history'
alias ssh='ssh -A'

#-------------------------------------------------------------------------------
# Aliases to folders within my Git root.
#-------------------------------------------------------------------------------
alias atf='cd ~/git/smart-device-sw/doc/automated-test'
alias ac='cd ~/git/AllanConsulting'
alias dhf='cd ~/git/smart-device-sw/doc/dhf'
alias doc='cd ~/git/smart-device-sw/doc'
alias dot='cd ~/git/dotfiles/'
alias gh='cd ~/git/GaryHoward'
alias hh='cd ~/git/HowardHouse'
alias hmst='cd ~/git/smart-device-sw'
alias mhp='cd ~/git/mhp_Documentation'

#-------------------------------------------------------------------------------
# A function to grep my command history
#-------------------------------------------------------------------------------
function hg() {
  history | grep "$1"
}

#-------------------------------------------------------------------------------
# File & String related functions
#-------------------------------------------------------------------------------
function ff()  {
  find . -type f -iname "$1" -print ;
}
function ffr() { find . -name "$1" -delete -ls ; }
function ffw() {
  local ext=$1 pattern=$2
  find . -name "$ext" -type f -exec grep "$pattern" /dev/null {} +
}

#-------------------------------------------------------------------------------
# Use vim to read man pages.
#-------------------------------------------------------------------------------k
function man() {
  vim \
    -c "Man $1 $2" \
    -c 'silent only' \
    -c 'set tw=78 ts=8 colorcolumn=0 nomod nolist nonu noma norl'
}
#-------------------------------------------------------------------------------k
# Use functions to create pdf document.
#-------------------------------------------------------------------------------k
function adoc() {
  f=$(basename "$1")
  f="${f%.*}"
  time asciidoctor \
         --trace \
         --require asciidoctor-pdf \
         --backend pdf \
         --attribute pdf-style=$HOME/git/dotfiles/asciidoctor/basic-theme.yml \
         --out-file _pdf/"$f".pdf \
         "$1" ;
}
function a2l() {
  time \
    asciidoctor-latex \
         --no-header-footer \
         --safe-mode=secure \
         "$1" ;
}
function atex() {
  mkdir -p _pdf
#  time \
    pdflatex \
         --no-shell-escape \
         --interaction=batchmode \
         --output-directory _pdf \
         "$1" ;
}
#-------------------------------------------------------------------------------
# Git helpers
#-------------------------------------------------------------------------------
function gce() {
  if [[ "amgen" = $1 ]]; then
    git config --local user.name gahoward
    git config --local user.email gahoward@amgen.com
  elif [[ "mhp" = $1 ]]; then
    git config --local user.name ghoward
    git config --local user.email gahoward@mhealthpharma.com
  elif [[ "traap" = $1 ]]; then
    git config --local user.name Traap
    git config --local user.email gary.a.howard@mac.com
  else
    echo "Usage: gce [amgen|mhp|traap]"
    echo "Found: " $1
  fi
  git config --local --get user.name
  git config --local --get user.email
}

#-------------------------------------------------------------------------------
# Prompt
#-------------------------------------------------------------------------------
export PS1='\[\033[01;31m\]\u\[\033[00m\]\[\033[01;33m\]@\[\033[00m\]\[\033[01;34m\]\h\[\033[00m\]\[\033[01;32m\]:\[\033[00m\]\[\033[01;35m\]\w\[\033[00m\]\[\033[01;36m\]\n\$\[\033[00m\] '
if [[ ${OSTYPE} =~ "darwin" ]]; then
  if [ -f "$(brew --prefix)/opt/bash-git-prompt/share/gitprompt.sh" ]; then
    GIT_PROMPT_START='\[\033[01;31m\]\u\[\033[00m\]\[\033[01;33m\]@\[\033[00m\]\[\033[01;34m\]\h\[\033[00m\]\[\033[01;32m\]:\[\033[00m\]\[\033[01;35m\]\w\[\033[00m\]\[\033[01;36m\]'
    GIT_PROMPT_END='\n\$\[\033[00m\] '
    source "$(brew --prefix)/opt/bash-git-prompt/share/gitprompt.sh"
  fi
fi
#----------------------------------------------------------------------
# Disable features / programs running on OSX.
#----------------------------------------------------------------------
function msa() { Launchctl remove com.microsoft.SyncServicesAgent ; }
function pah() { defaults write -g ApplePressAndHoldEnable -bool false ; }

#----------------------------------------------------------------------
# Set terminal title.
#----------------------------------------------------------------------
function title() { echo -n -e "\033]0;$1\007"; }

#----------------------------------------------------------------------
# Docker machine and stack commands
#----------------------------------------------------------------------
function sdm() {
  docker-machine env
  eval "$(docker-machine env default)"
  docker-machine start
}
function docker-gc() {
  docker ps --no-trunc -aq | xargs docker rm
  docker images -f "dangling=true" -q | xargs docker rmi
}
function dba() { stack exec -- doc-build; }
function dbc() { stack exec -- doc-build clean ; }
function dbh() { stack build hmst-documentation ; }
function dbt() { stack exec -- doc-build tex ; }
function dbti(){ stack exec -- env DONT_RERUN_TEX_BUILD=1 doc-build tex;}
function dbv() { stack build verify && stack exec verify ; }
#----------------------------------------------------------------------
# Swapp VIM convigurations.
#----------------------------------------------------------------------
function setvim() {
  echo "Changing Vim configuration."
  VIM="${HOME}/.vim"
  VIMRC="${HOME}/.vimrc"

  HVN="${HOME}/.config/haskell-vim-now"
  DOT="${HOME}/git/dotfiles/vim"

  echo "Removing currnet Vim configuration."
  rm -v ${VIM}
  rm -v ${VIMRC}

  if [[ "hvn" = $1 ]]; then
    echo "Using Haskell Vim Now"
    ln -sv ${HVN}/.vim ${VIM}
    ln -sv ${HVN}/.vimrc ${VIMRC}
    ln -sv ${DOT}/settings.vim ${HVN}/vimrc.local
    ln -sv ${DOT}/plugins-hvm.vim ${HVN}/plugins.vim
  else
    echo "Using Traap Vim."
    ln -sv ${HOME}/git/dotfiles/vim ${VIM}
    ln -sv ${HOME}/git/dotfiles/vimrc ${VIMRC}
  fi

}
#----------------------------------------------------------------------
# Highly volatile functions
#----------------------------------------------------------------------
function x() {
  git config --global user.name gahoward
  git config --global user.email gahoward@amgen
  eval "$(ssh-agent -s)"
  ssh-add ~/.ssh/fhscore_rsa
  GitProtocols
}
#----------------------------------------------------------------------

